const Home = ({ files, setFiles, selectedFile, setSelectedFile }) => {
  const handleFileUpload = (event) => {
    const file = event.target.files?.[0];
    if (file && (file.type === 'text/csv' || file.name.endsWith('.xlsx'))) {
      const newFile = {
        id: Math.random().toString(36).substring(2),
        name: file.name,
        type: file.type,
        data: [],
      };
      if (file.type === 'text/csv') {
        Papa.parse(file, {
          complete: (result) => {
            newFile.data = result.data; // Store parsed CSV data
            setFiles([...files, newFile]);
            setSelectedFile(newFile);
          },
          header: true,
          skipEmptyLines: true, // Clean data by skipping empty lines
        });
      } else if (file.name.endsWith('.xlsx')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheet = workbook.Sheets[workbook.SheetNames[0]];
          newFile.data = XLSX.utils.sheet_to_json(sheet); // Store parsed Excel data
          setFiles([...files, newFile]);
          setSelectedFile(newFile);
        };
        reader.readAsArrayBuffer(file);
      }
    }
  };

  // Simple data processing to extract a numeric column for visualization
  const getChartData = (data) => {
    // Assume data has a numeric column (e.g., 'value'); adjust based on your data structure
    return data.map((row, index) => ({
      label: row.label || `Row ${index + 1}`,
      value: Number(row.value) || 0, // Replace 'value' with actual column name
    }));
  };

  // Chart component for visualization
  const DataChart = ({ data }) => {
    const canvasRef = React.useRef(null);
    React.useEffect(() => {
      if (data.length > 0) {
        const chartData = getChartData(data);
        const ctx = canvasRef.current.getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: chartData.map((item) => item.label),
            datasets: [{
              label: 'Data Values',
              data: chartData.map((item) => item.value),
              backgroundColor: '#3B82F6',
              borderColor: '#1F2937',
              borderWidth: 1,
            }],
          },
          options: {
            scales: {
              y: { beginAtZero: true },
            },
            plugins: {
              legend: { display: true },
            },
          },
        });
      }
    }, [data]);
    return <canvas ref={canvasRef} className="w-full h-64" />;
  };

  return (
    <main className="container mx-auto p-4">
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 className="text-xl font-semibold mb-4 text-text">Upload Data File</h2>
        <input
          type="file"
          accept=".csv,.xlsx"
          onChange={handleFileUpload}
          className="block w-full text-sm text-text
            file:mr-4 file:py-2 file:px-4
            file:rounded-full file:border-0
            file:text-sm file:font-semibold
            file:bg-secondary file:text-white
            hover:file:bg-blue-700"
        />
        <p className="mt-2 text-sm text-text">Supported formats: .csv, .xlsx</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-text">Uploaded Files</h2>
          {files.length === 0 ? (
            <p className="text-text">No files uploaded yet.</p>
          ) : (
            <ul className="space-y-2">
              {files.map((file) => (
                <li
                  key={file.id}
                  className={`p-2 rounded cursor-pointer ${
                    selectedFile?.id === file.id ? 'bg-secondary text-white' : 'hover:bg-accent'
                  }`}
                  onClick={() => setSelectedFile(file)}
                >
                  {file.name}
                </li>
              ))}
            </ul>
          )}
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-text">Data Insights</h2>
          {selectedFile ? (
            <div>
              <p className="text-text">Showing data for: {selectedFile.name}</p>
              {selectedFile.data.length > 0 ? (
                <DataChart data={selectedFile.data} />
              ) : (
                <div className="mt-4 h-64 bg-accent flex items-center justify-center">
                  <p className="text-text">No data available for visualization</p>
                </div>
              )}
            </div>
          ) : (
            <p className="text-text">Select a file to view insights.</p>
          )}
        </div>
      </div>
    </main>
  );
};